@document.meta
title: phos.ChromaticAbberation
description: 
authors: phos
categories: 
created: 2024-09-11T12:10:19+0530
updated: 2024-09-11T12:10:19+0530
version: 1.1.1
tangle: {
    languages: {
        moon: ~/Git/Aegisub-Scripts/macros/phos.ChromaticAbberation.moon
    }
    scope: all
}
@end

* Script Details
    @code moon
    export script_name = "Chromatic Abberation"
    export script_description = "Add chromatic abberation to shape and text."
    export script_version = "1.0.2"
    export script_author = "PhosCity"
    export script_namespace = "phos.ChromaticAbberation"
    @end

* Dependency Control
    @code moon
    DependencyControl = require "l0.DependencyControl"
    depctrl = DependencyControl{
        feed: "https://raw.githubusercontent.com/PhosCity/Aegisub-Scripts/main/DependencyControl.json",
        {
            {"a-mo.LineCollection", version: "1.3.0", url: "https: //github.com/TypesettingTools/Aegisub-Motion",
                feed: "https: //raw.githubusercontent.com/TypesettingTools/Aegisub-Motion/DepCtrl/DependencyControl.json"},
            {"l0.ASSFoundation", version: "0.5.0", url: "https: //github.com/TypesettingTools/ASSFoundation",
                feed: "https: //raw.githubusercontent.com/TypesettingTools/ASSFoundation/master/DependencyControl.json"},
            {"phos.AssfPlus", version: "1.0.2", url: "https://github.com/PhosCity/Aegisub-Scripts",
                feed: "https://raw.githubusercontent.com/PhosCity/Aegisub-Scripts/main/DependencyControl.json"},
            {"phos.AegiGui", version: "1.0.0", url: "https://github.com/PhosCity/Aegisub-Scripts",
                feed: "https://raw.githubusercontent.com/PhosCity/Aegisub-Scripts/main/DependencyControl.json"},
            "aegisub.util"
        }
    }
    LineCollection, ASS, AssfPlus, AegiGui, util = depctrl\requireModules!
    
    @end

* Helper Functions

** Create GUI
   @code moon
   createGUI = ->
       str = "
       | label, x Offset                           | float,xOffset, 2 | pad, 10 | label, Color 1 | color, color1, &H00FFFF& |
       | label, y Offset                           | float,yOffset, 2 | null    | label, Color 2 | color, color2, &HFF00FF& |
       | check, keepBaseColor, Keep Original Color |                  |         | label, Color 3 | color, color3, &HFFFF00& |
       "
       btn, res = AegiGui.open str, "Apply:ok, Revert, Cancel:cancel"
       aegisub.cancel! unless btn
       res, btn

   @end

** Color Mixing
*** Functions
    @code moon
    mixColors = (res, baseColor) ->
        rgb_to_cmy = (r, g, b) ->
            1 - r / 255, 1 - g / 255, 1 - b / 255
    
        cmy_to_rgb = (c, m, y) ->
            255 * (1 - c), 255 * (1 - m), 255 * (1 - y)
    
        mix_cmy = (c1, m1, y1, c2, m2, y2) ->
            math.max(c1, c2), math.max(m1, m2), math.max(y1, y2)
    
        mix_rgb_colors = (col1, col2) ->
            c1, m1, y1 = rgb_to_cmy(table.unpack(col1))
            c2, m2, y2 = rgb_to_cmy(table.unpack(col2))
            c_result, m_result, y_result = mix_cmy(c1, m1, y1, c2, m2, y2)
            cmy_to_rgb(c_result, m_result, y_result)
    @end
*** If base color is selected
    @code moon
        local color1, color2, color3
        if baseColor
            c_result, m_result, y_result = rgb_to_cmy(table.unpack(baseColor))
    
            c1, m1, y1 = 0, 0, y_result
            c2, m2, y2 = 0, m_result, 0
            c3, m3, y3 = c_result, 0, 0
    
            r1, g1, b1 = cmy_to_rgb(c1, m1, y1)
            r2, g2, b2 = cmy_to_rgb(c2, m2, y2)
            r3, g3, b3 = cmy_to_rgb(c3, m3, y3)
    
            color1 = {r1, g1, b1}
            color2 = {r2, g2, b2}
            color3 = {r3, g3, b3}
    @end
*** If three colors are selected
    @code moon
        else
            color1 = {util.extract_color res["color1"]}
            color2 = {util.extract_color res["color2"]}
            color3 = {util.extract_color res["color3"]}
    @end
*** Mix three colors
    @code moon
        r_all, g_all, b_all = mix_rgb_colors(color1, color2)
        n1_r, n1_g, n1_b = mix_rgb_colors({r_all, g_all, b_all}, color3)
    @end
*** Mix two colors
    @code moon
        n2_r, n2_g, n2_b = mix_rgb_colors(color1, color2)
        n3_r, n3_g, n3_b = mix_rgb_colors(color1, color3)
        n4_r, n4_g, n4_b = mix_rgb_colors(color2, color3)
    @end
*** Return colors
    @code moon
        {
            {r: color1[1], g: color1[2], b: color1[3]},
            {r: color2[1], g: color2[2], b: color2[3]},
            {r: color3[1], g: color3[2], b: color3[3]},
            {r: n1_r, g: n1_g, b: n1_b},
            {r: n2_r, g: n2_g, b: n2_b},
            {r: n3_r, g: n3_g, b: n3_b},
            {r: n4_r, g: n4_g, b: n4_b},
        }

    @end

** Pathfinding
   @code moon
   pathfinding = (shape, xOffset, yOffset) ->
   @end
*** Base shapes
    There will be three base shapes. `shape2` is the original shape from line. `shape1` is the shape which is just `shape2` but moved up and left by the offset amount. Similarly, `shape3` is just `shape2` but moved down and right by the offset amount.
    @code moon
        shape2 = shape\copy!
        shape1 = shape2\copy!\sub xOffset, yOffset
        shape3 = shape2\copy!\add xOffset, yOffset
    @end
*** Copy shapes
    Now we will just define other shapes f1, f2, f3, n1, n2, n3 and n4.

    f1 => Shape 1 - Shape 2 - Shape 3
    f2 => Shape 2 - Shape 1 - Shape 3
    f3 => Shape 3 - Shape 1 - Shape 2
    n1 => Intersection of Shape 1, Shape 2 and Shape 3
    n2 => Shape 2 - Shape 3 - f2
    n3 => Shape 3 - Shape 2 - f3
    n4 => Shape 3 - Shape 1 - f3

    At this point we are not modifying any shapes. We're just making a copy of base shapes into the variables.
    @code moon
        f1 = shape1\copy!
        f2 = shape2\copy!
        f3 = shape3\copy!

        n1 = shape1\copy!
        n2 = shape2\copy!
        n3 = shape3\copy!
        n4 = shape3\copy!
    @end
*** Find f1
    @code moon
        AssfPlus._shape.pathfinder "Difference", f1, shape2
        AssfPlus._shape.pathfinder "Difference", f1, shape3
    @end
*** Find f2
    @code moon
        AssfPlus._shape.pathfinder "Difference", f2, shape1
        AssfPlus._shape.pathfinder "Difference", f2, shape3
    @end
*** Find f3
    @code moon
        AssfPlus._shape.pathfinder "Difference", f3, shape1
        AssfPlus._shape.pathfinder "Difference", f3, shape2
    @end
*** Find n1
    @code moon
        AssfPlus._shape.pathfinder "Intersect", n1, n2
        AssfPlus._shape.pathfinder "Intersect", n1, n3
    @end
*** Find n2
    @code moon
        AssfPlus._shape.pathfinder "Difference", n2, shape3
        AssfPlus._shape.pathfinder "Difference", n2, f2
    @end
*** Find n3
    @code moon
        AssfPlus._shape.pathfinder "Difference", n3, shape2
        AssfPlus._shape.pathfinder "Difference", n3, f3
    @end
*** Find n4
    @code moon
        AssfPlus._shape.pathfinder "Difference", n4, shape1
        AssfPlus._shape.pathfinder "Difference", n4, f3
    @end
*** Return the shapes
    @code moon
        f1, f2, f3, n1, n2, n3, n4

    @end

* Main Function
   @code moon
   main = (sub, sel) ->
   @end
** Create the GUI
   @code moon
       res, btn = createGUI!
   @end
** Check if user asks to revert an existing CA
   @code moon
       if btn == "Revert"
           AssfPlus._util.revertLines sub, sel, "phos.ca"
           return
   @end
** Find offset
   @code moon
       xOffset = res["xOffset"]
       yOffset = res["yOffset"]
   @end
** Line Collection
   @code moon
       lines = LineCollection sub, sel
       return if #lines.lines == 0
   
       toDelete, toAdd = {}, {}
       windowError = AssfPlus._util.windowError
       lines\runCallback (lines, line, i) ->
   @end
*** Parse line
    We're doing a couple of things here. We're parsing the line using Assf but at the same time, we're setting up to delete this line. All the original lines will be removed and will be replaced by new lines at the end.
    Also, we're adding the original line to the extradata. This is just like Aegisub Motion where you can revert the lines produced by this script to obtain the original lines later on.
    @code moon
            data = ASS\parse line
            table.insert toDelete, line
            AssfPlus._util.setOgLineExtradata line, "phos.ca"
    @end
*** Get position
    If there is no `pos` tag in the line, then the resulting lines will appear on different rows. So we're inserting the position if it doesn't exist.
    @code moon
            pos = data\getPosition!
            posInLine = data\getTags "position"
            if #posInLine == 0
                data\insertTags pos
    @end
*** Determine colors of each shape
    @code moon
            tags = (data\getEffectiveTags 1, true, true, false).tags
            b, g, r = tags.color1\getTagParams!
            color = mixColors res, (res["keepBaseColor"] and {r, g, b})
    @end

*** Section Count
    @code moon
            textSectionCount = data\getSectionCount ASS.Section.Text
            drawingSectionCount = data\getSectionCount ASS.Section.Drawing
    @end
*** Some initial checks
    @code moon
            if drawingSectionCount == 0 and textSectionCount == 0
                windowError "There is neither text section nor drawing section in the line. Nothing to do here."
    
            elseif drawingSectionCount > 0 and textSectionCount > 0
                windowError "Lines with both text section and drawing section cannot be handled by this script."
    
            elseif drawingSectionCount > 1
                windowError "Lines with multiple drawing section cannot be handled by this script."
    @end
*** For drawing section
    @code moon
            elseif drawingSectionCount > 0
                data\callback ((section) ->
                    f1, f2, f3, n1, n2, n3, n4 = pathfinding section, xOffset, yOffset
    
                    for index, item in ipairs {f1, f2, f3, n1, n2, n3, n4}
                        continue if item\toString! == ""
                        section.contours = item.contours
                        r, g, b = color[index].r, color[index].g, color[index].b
                        data\replaceTags {ASS\createTag "color1", b, g, r}
                        table.insert toAdd, ASS\createLine { line }
                ), ASS.Section.Drawing
    @end
*** For text section
    What we're going to do is first we convert the text to shape. Then we can manipulate it later in the same way we did with drawing and then convert it to clip and insert it to the line.
    @code moon
            elseif textSectionCount > 0
    @end
**** Convert text to shape
     @code moon
                 shape = AssfPlus.lineData.getTextShape data
                 if shape == nil or shape == ""
                     windowError "Text shape not found."
                 shape = ASS.Draw.DrawingBase {str: shape}
     @end
**** Find all the shapes
     @code moon
                 f1, f2, f3, n1, n2, n3, n4 = pathfinding shape, xOffset, yOffset
     @end
**** Mini Function to do it all
     For each shape we found above, this function will do all necessary things needed to add it back to line
     @code moon
                 prepareLine = (shape, color, keepBaseColor = false) ->
                     return if shape\toString! == ""
                     data\replaceTags {ASS\createTag "clip_vect", shape}
                     unless keepBaseColor
                         r, g, b = color.r, color.g, color.b
                         data\replaceTags {ASS\createTag "color1", b, g, r}
                     table.insert toAdd, ASS\createLine { line }
     @end
**** Add base line which is based on shape 2
     This is the base line. Depending on the settings, we might want to keep the original color of this line.
     @code moon
                 prepareLine n1, color[4], res["keepBaseColor"]
     @end
**** Small cleanup
     In case the base line has color gradient, we only need it in base line. Since we've alreay added the base line above, now we can just nuke all inline colors
     @code moon
                 data\removeTags "color1", 2, #data.sections
                 data\cleanTags 1
     @end
**** Add all remaining lines based on shape 2
     @code moon
                 prepareLine n2, color[5]
                 prepareLine n4, color[7]
                 prepareLine f2, color[2]
     @end
**** Add all lines based on shape 1
     Shape 1 is the one that is moved up and left by the offset amount. So we need to do the same to the line as well.
     @code moon
                 pos\sub xOffset, yOffset
                 prepareLine f1, color[1]
     @end
**** Add all lines based on shape 3
     Shape 3 is the one that is moved down and right by the offset amount. Since we moved moved the line up and left by the offset amount above, we need to double the offset amount to undo that. Otherwise we'll just end up in original position.
     @code moon
                 pos\add xOffset * 2, yOffset * 2
                 prepareLine f3, color[3]
                 prepareLine n3, color[6]
     @end
** Add lines
   @code moon
       for ln in *toAdd
         lines\addLine ln
   @end
** LineCollection stuff
   @code moon
       lines\insertLines!
       lines\deleteLines toDelete

   @end
* Register the macro to Aegisub
  @code moon
  depctrl\registerMacro main
  @end
