@document.meta
title: phos.Abacus
description: 
authors: phos
categories: 
created: 2024-09-11T12:10:19+0530
updated: 2024-09-11T12:10:19+0530
version: 1.1.1
tangle: {
    languages: {
        moon: ~/Git/Aegisub-Scripts/macros/phos.Abacus.moon
    }
    scope: all
}
@end

* Script Details
    @code moon
    export script_name = "Abacus"
    export script_description = "Recalculates values of tags."
    export script_version = "1.0.1"
    export script_author = "PhosCity"
    export script_namespace = "phos.Abacus"
    @end

* Dependency Control
    @code moon
    DependencyControl = require "l0.DependencyControl"
    depctrl = DependencyControl{
        feed: "https://raw.githubusercontent.com/PhosCity/Aegisub-Scripts/main/DependencyControl.json",
        {
            {"a-mo.LineCollection", version: "1.3.0", url: "https: //github.com/TypesettingTools/Aegisub-Motion",
                feed: "https: //raw.githubusercontent.com/TypesettingTools/Aegisub-Motion/DepCtrl/DependencyControl.json"},
            {"l0.ASSFoundation", version: "0.5.0", url: "https: //github.com/TypesettingTools/ASSFoundation",
                feed: "https: //raw.githubusercontent.com/TypesettingTools/ASSFoundation/master/DependencyControl.json"},
            {"l0.Functional", version: "0.6.0", url: "https://github.com/TypesettingTools/Functional",
                feed: "https://raw.githubusercontent.com/TypesettingTools/Functional/master/DependencyControl.json"},
            {"phos.AssfPlus", version: "1.0.5", url: "https://github.com/PhosCity/Aegisub-Scripts",
                feed: "https://raw.githubusercontent.com/PhosCity/Aegisub-Scripts/main/DependencyControl.json"},
            {"phos.AegiGui", version: "1.0.0", url: "https://github.com/PhosCity/Aegisub-Scripts",
                feed: "https://raw.githubusercontent.com/PhosCity/Aegisub-Scripts/main/DependencyControl.json"},
        }
    }
    LineCollection, ASS, Functional, AssfPlus, AegiGui = depctrl\requireModules!
    {:list, :util, :math, :string} = Functional
    
    @end

* Global GUI Result
  This lonely table exist here outside the scope of all other functions because Aegisub remembers the state of variables in this scope even between the consecutive runs of Aegisub script. So I will store the stat of GUI here and use this to populate the GUI next time the script is run.
  It is better than using config in this case because config persists even when Aegisub is closed.
  @code moon
  globalGUIResult = {}
  @end

* Execute Command
  @code moon
  execute_command = (expr, operation) ->
  @end
** Number
   If the expression is a number, then we just return it
   @code moon
       if num = tonumber expr
           return num / (operation == "mul" and 100 or 1)
   @end
** Time
*** 0:00:00.00
    @code moon
        if expr\match "^%-?%d:%d%d:%d%d%.%d%d$"
            sign, timeString = expr\match "^(%-?)(%d:%d%d:%d%d%.%d%d)$"
            expr = util.assTimecode2ms timeString
            expr = -1 * expr if sign == "-"
            return expr
    @end
*** Milliseconds
    @code moon
        elseif ms = expr\match("^([%d%-%.]+)ms$")
            return tonumber ms
    @end
*** Centiseconds
    @code moon
        elseif cs = expr\match("^([%d%-%.]+)cs$")
            return tonumber(cs) * 10
    @end
*** Seconds
    @code moon
        elseif s = expr\match("^([%d%-%.]+)s$")
            return tonumber(s) * 1000
    @end
*** Minutes
    @code moon
        elseif m = expr\match("^([%d%-%.]+)m$")
            return tonumber(m) * 60 * 1000
    @end
*** Hours
    @code moon
        elseif h = expr\match("^([%d%-%.]+)h$")
            return tonumber(h) * 3600 * 1000
    @end
*** Frames
    @code moon
        elseif f = expr\match("^([%d%-%.]+)f$")
            AssfPlus._util.windowAssertError AssfPlus._util.checkVideoIsOpen!, "Shifting time by frame only makes sense in the context of video. Could not find any loaded video."
            return expr
    @end
** Comma separated list
   If we have a comma separated list, we process each number between comma and return a lua table.
   @code moon
       if expr\match "^[%d%-,%s]+$"
           split = string.split expr, ","
           result = {}
           for item in *split
               item = string.trim item
               result[#result+1] = tonumber(item) / (operation == "mul" and 100 or 1)
           return result
   @end
** Random Float
   Finds the random float between two numbers.
   @code moon
       for item in expr\gmatch "math%.randomfloat%([^)]+%)"
           min, max = item\match "([%d%.%-]+)%s-,%s-([%d%.%-]+)"
           if not min or not max
               AssfPlus._util.windowError "Invalid randomfloat syntax: #{expr}"
           expr = expr\gsub string.escLuaExp(item), math.randomFloat(min,max)
   @end
** Process lua math expressions
   @code moon
       func, err = loadstring("return " .. expr)
       AssfPlus._util.windowAssertError func, "Invalid lua math expression: #{err}"
   
       success, result = pcall(func)
       AssfPlus._util.windowAssertError success, "Could not calculate the expression: #{err}"
   @end
** Return the result
   @code moon
       AssfPlus._util.windowAssertError result, "Invalid input: #{expr}. Could not calculate the expression."
       result / (operation == "mul" and 100 or 1)
   
   @end
* Assert Type
  This is used to assert the type of the value.
  @code moon
  assertType = (val, _type, tag) ->
      AssfPlus._util.windowAssertError type(val) == _type, "Invalid type: #{_type} expected for tag #{tag}, got #{type val}."
  
  @end

* Main Function
   @code moon
   main = (sub, sel) ->
   @end
** Line Collection
   @code moon
       lines = LineCollection sub, sel
       return if #lines.lines == 0
   @end
** Create the GUI
*** Static GUI
    @code moon
        str = "
        | label, Change value by          | edit, changeValueX, 0              | edit, changeValueY, 0                   |
        | check, time, Time               | check, preserveTime, Preserve Time | check, layer, Layer                     |
        | check, margin_left, Left Margin | check, margin_right, Right Margin  | check, margin_vertical, Vertical Margin |
        |                                 |                                    |                                         |
        | check, position, pos            | check, teleport, pos/org/move/clip | null                                    |
        | check, scale, fsc               | check, scale_x, fscx               | check, scale_y, fscy                    |
        | check, fontsize, fs             | check, angle, frz                  | check, spacing, fsp                     |
        | check, color1, c                | check, color3, 3c                  | check, color4, 4c                       |
        | check, outline, bord            | check, shadow, shad                |                                         |
        "
    @end
*** Dynamic GUI
**** Collect Tags present in the lines
     @code moon
         collection = AssfPlus.lineCollection.collectTags lines, _, true
     @end
**** Remove all the tags that are either already shown in Static GUI or shouldn't be shown
     @code moon
         coreTags = {"position", "scale_x", "scale_y", "fontsize", "angle", "spacing", "color1", "color3", "color4", "outline", "shadow"}
         collection.tagList  = list.diff collection.tagList, coreTags, {"junk", "unknown", "reset", "italic", "bold", "underline", "strikeout", "wrapstyle", "align", "fontname"}
     @end
**** Some special cases
     @code moon
         tagList = {}
         for tagName in *collection.tagList
             switch tagName
     @end
***** Move
      In case of move, we can either recalculate both coordinates, or just one of them or start time or end time of the tag.
      @code moon
                  when "move"
                      for item in *{"move", "[[move (x1, y1)]]", "[[move (x2, y2)]]", "[[move (t1, t2)]]"}
                          tagList[#tagList + 1] = item
      @end
***** Clip Rect
      Either recalculate both coordinates or just one of them.
      @code moon
                  when "clip_rect"
                      for item in *{"clip_rect", "[[clip_rect (x1,y1)]]", "[[clip_rect (x2,y2)]]"}
                          tagList[#tagList + 1] = item
      @end
***** Iclip rect
      Same deal as clip rect.
      @code moon
                  when "iclip_rect"
                      for item in *{"iclip_rect", "[[iclip_rect (x1,y1)]]", "[[iclip_rect (x2,y2)]]"}
                          tagList[#tagList + 1] = item
      @end
***** Transform
      Either recalculate time of transform or accel of transform.
      @code moon
                  when "transform"
                      for item in *{"[[transform (t1, t2)]]", "transform accel"}
                          tagList[#tagList + 1] = item
      @end
***** Shape
      @code moon
                  when "drawing"
                      tagList[#tagList + 1] = "shape"
      @end
***** Everything else
      @code moon
                  else
                      tagList[#tagList + 1] = tagName
      @end
** Append dynamic GUI string to static GUI string
   @code moon
       if #tagList > 0
           str ..= "||||\n"
           for ln in *(list.chunk tagList, 3)
               str ..= "| check, #{ln[1]}, #{(ASS.toFriendlyName[ln[1]] or ln[1])\gsub("\\", "")}"
               str ..= ln[2] and "| check, #{ln[2]}, #{(ASS.toFriendlyName[ln[2]] or ln[2])\gsub("\\", "")} " or "|"
               str ..= ln[3] and "| check, #{ln[3]}, #{(ASS.toFriendlyName[ln[3]] or ln[3])\gsub("\\", "")} |\n" or "||\n"
   @end
** Line Increment
   If user has selected multiple lines, the option to increase the value for each line by a certain step should be availabe in the GUI.
   @code moon
       if #lines.lines > 1
           str ..= "||||\n| check, lineIncrement, Increase with each line |||"
   @end
** Initiate GUI
   We use AegiGUI to first create the dialog, buttons and button id table from the GUI string. Then we change the values of the dialog table using the previous GUI values that was stored in globalGUIResult. As soon as the GUI initiates, we save the new state of GUI to globalGUIResult so that it can be used next time.
   @code moon
       dialog, button, buttonID = AegiGui.create str, "Add, Multiply, Reset GUI, Cancel:cancel"
       for index, item in pairs dialog
           continue unless item.name
           continue unless globalGUIResult[item.name]
           if item.text
               item.text = globalGUIResult[item.name]
           else
               item.value = globalGUIResult[item.name]
       btn, res = aegisub.dialog.display(dialog, button, buttonID)
       globalGUIResult = res
       aegisub.cancel! unless btn
   @end
** Reset GUI
   @code moon
       if btn == "Reset GUI"
           dialog, button, buttonID = AegiGui.create str, "Add, Multiply, Cancel:cancel"
           btn, res = aegisub.dialog.display(dialog, button, buttonID)
           globalGUIResult = res
           aegisub.cancel! unless btn
   @end
** Cleanup
   Some things in GUI string have to be surrounded by [[...]] to escape the contents but we do not need it. So we clean it up here.
   @code moon
       for index, item in ipairs tagList
           tagList[index] = item\gsub "[%[%]]", ""
   @end
** Operation
   This is the operation that is supported by ASSFoundation.
   Only "Add" and "Multiply" are supported.
   ASSFoundation also supports "Power" operation but it's not supported yet.
   @code moon
       operation = btn == "Add" and "add" or "mul"
   @end
** Scale
   There is a scale option in GUI. If that is ticked then, the resulting recalculation acts on both fscx and fscy. So we manually activate them ourselves.
   @code moon
       if res["scale"]
           res["scale_x"] = true
           res["scale_y"] = true
   @end
** Teleport
   There is a pos/org/move/clip option in GUI. If that is ticked, its the same as ticking a lot of tags at once. So we manually activate them here.
   @code moon
       if res["teleport"]
           for item in {"position", "origin", "clip_vect", "iclip_vect", "clip_rect", "iclip_rect", "move"}
               res[item] = true
   @end
** Randomseed
   Set seed for math.random if user tries to use it.
   @code moon
       if res["changeValueX"]\match "random" or res["changeValueY"]\match "random"
           math.randomseed os.time!
   @end
** Get values to add/multiply
   @code moon
       x = execute_command res["changeValueX"], operation
       y = execute_command res["changeValueY"], operation
       originalX = x
       originalY = y
   @end
** Loop through lines
   @code moon
       lines\runCallback ((lines, line, i) ->
   @end
*** Progress Reporting
    @code moon
            AssfPlus._util.checkCancellation!
            AssfPlus._util.progress "Recalculating", i, #lines.lines
    @end
*** Parse line
    @code moon
            data = ASS\parse line
    @end
*** Check Default Tags
    There are some tags that act on the line regardless of whether the tag exist in the line itself.
    If the tag is not in the line and user chooses to recalculate it, then we insert the default value of the tag that is taken from the style.
    Then later we will modify it after recalculating.
    @code moon
            for tag in *coreTags
                continue unless res[tag]
                data\insertDefaultTags tag if #data\getTags(tag) == 0
    @end
*** Loop through all tags
    Loop though all the tags we have collected and if the user has ticked it in the GUI, we will operate on them.
    @code moon
            for tag in *(list.join tagList, coreTags, {"time", "end_time", "layer", "margin_left", "margin_right", "margin_vertical"})
                continue unless res[tag]
                switch tag
    @end
**** Time
     @code moon
                     when "time"
                         local startDelta, endDelta
                         if type(x) == "number"
                             startDelta = x
                         elseif f = x\match "^([%d%-%.]+)f$"
                             startDelta = aegisub.ms_from_frame(line.startFrame + f) - line.start_time
                         if type(y) == "number"
                             endDelta = y
                         elseif f = y\match "^([%d%-%.]+)f$"
                             endDelta = aegisub.ms_from_frame(line.endFrame + f) - line.end_time
     
                         line.start_time += startDelta
                         line.end_time += endDelta
     
                         AssfPlus._util.windowAssertError line.end_time > line.start_time, "Recalculation of line's time pushed the end time before the start time."
     @end
***** Preserve Time
      If user chooses to preserve time, we can preserve the time of tags like fade, move, transform and karaoke tags such that the frames at which the effect of the tag happens are preserved.
      @code moon
                          if res["preserveTime"]
      @end
****** Karaoke Tags
       @code moon
                               ktags = data\getTags {'k_fill', 'k_sweep', 'k_bord'}
                               unless #ktags == 0
                                   ktags[1].value -= startDelta
                                   AssfPlus._util.windowAssertError ktags[1].value >= 0, "Recalculation of line's time pushed the first syl before the line start."
       
                                   ktags[#ktags].value += endDelta
                                   AssfPlus._util.windowAssertError ktags[#ktags].value >= 0, "Recalculation of line's time pushed the last syl after the line end."
       @end
***** Fade Tags
      @code moon
                              for tag in *data\getTags {"fade_simple"}
                                  tag.inDuration -= startDelta
                                  tag.outDuration += endDelta
      @end
***** Transform and Move Tags
      @code moon
                              for tag in *data\getTags {"transform", "move"}
                                  if tag.startTime.value == 0 and tag.endTime.value == 0
                                      tag.endTime += line.duration
                                  tag.startTime -= startDelta
                                  tag.endTime -= startDelta
      @end
**** Layer
     @code moon
                     when "layer"
                         assertType x, "number", tag
                         line.layer = math.max(line.layer + x, 0)
     @end
**** Left Margin
     @code moon
                     when "margin_left"
                         assertType x, "number", tag
                         line.margin_l = math.max(line.margin_l + x, 0)
     @end
**** Right Margin
     @code moon
                     when "margin_right"
                         assertType x, "number", tag
                         line.margin_r = math.max(line.margin_r + x, 0)
     @end
**** Vertical Margin
     @code moon
                     when "margin_vertical"
                         assertType x, "number", tag
                         line.margin_t = math.max(line.margin_t + x, 0)
     @end
**** Tags that changes first two parameters
     - Position
     - Origin
     - Simple fade
     - Vectorial clip
     - Vectorial iclip
     - Start coordinate of move
     - Top left coordinate of rectangular clip
     @code moon
                     when "position", "origin", "clip_vect", "iclip_vect", "move (x1, y1)", "clip_rect (x1,y1)", "iclip_rect (x1,y1)"
                         assertType x, "number", tag
                         assertType y, "number", tag
                         data\modTags tag, (tg) -> tg[operation] tg, x, y
     @end
**** Tags that changes third and fourth parameters
     - End coordinate of move
     - Bottom right coordinate of rectangular clip
     @code moon
                     when "move (x2, y2)", "clip_rect (x2,y2)", "iclip_rect (x2,y2)"
                         assertType x, "number", tag
                         assertType y, "number", tag
                         data\modTags "move", (tg) -> tg[operation] tg, _, _, x, y
     @end
**** Tags that changes first four parameters
     - Move
     - Rectangular clip
     @code moon
                     when "move", "clip_rect", "iclip_rect"
                         assertType x, "number", tag
                         assertType y, "number", tag
                         data\modTags "move", (tg) -> tg[operation] tg, x, y, x, y
     @end
**** Move Time
     @code moon
                     when "move (t1, t2)"
                         assertType x, "number", tag
                         assertType y, "number", tag
                         data\modTags "move", (tg) -> tg[operation] tg, _, _, _, _, x, y
     @end
**** Transform Time
     @code moon
                     when "transform (t1, t2)"
                         assertType x, "number", tag
                         assertType y, "number", tag
                         transforms = data\getTags "transform"
                         for tr in *transforms
                             tr.startTime\add x
                             tr.endTime\add y
     @end
**** Transform Accel
     @code moon
                     when "transform accel"
                         assertType x, "number", tag
                         transforms = data\getTags "transform"
                         for tr in *transforms
                             tr.accel\add x
     @end
**** Complex Fade
     @code moon
                     when "fade"
                         assertType x, "table"
                         a1, a2, a3, t1, t2, t3, t4 = table.unpack x
                         data\modTags tag, (tg) -> tg[operation] tg, t2, t4 - t3, t1, t3, a1, a2, a3
     @end
**** Karaoke
     @code moon
                     when "k_fill", "k_sweep", "k_bord"
                         assertType x, "number", tag
                         data\modTags tag, (tg) -> tg[operation] tg, x
                         ktags = data\getTags tag
                         totalKaraokeDuration = 0
                         for index, item in ipairs ktags
                             if index == 1 and item.value < 0
                                 AssfPlus._util.windowError "The recalculation shifted the tag #{ASS.toFriendlyName[tag]} before the line start."
                             totalKaraokeDuration += item.value
                         if totalKaraokeDuration > line.duration
                             AssfPlus._util.windowError "The recalculation shifted the tag #{ASS.toFriendlyName[tag]} past the line end or it was already past the line end. In any case, it's not correct."
     @end
**** Shape
     @code moon
                     when "shape"
                         assertType x, "number", tag
                         assertType y, "number", tag
                         data\callback ((section) ->
                             section[operation] section, x, y
                         ), ASS.Section.Drawing
     @end
**** Fade simple
     The time shouldn't be less than 0 otherwise this would be as lumped together with position and origin.
     @code moon
                     when "fade_simple"
                         assertType x, "number", tag
                         assertType y, "number", tag
                         data\modTags tag, (tg) ->
                             xOrigValue, yOrigValue = tg\getTagParams!
                             if operation == "add"
                                 AssfPlus._util.windowAssertError xOrigValue + x >= 0, "Recalculation of tag #{ASS.toFriendlyName[tag]} would result in a negative value."
                                 AssfPlus._util.windowAssertError yOrigValue + y >= 0, "Recalculation of tag #{ASS.toFriendlyName[tag]} would result in a negative value."
                                 tg\add x, y
                             elseif operation == "mul"
                                 AssfPlus._util.windowAssertError xOrigValue * x >= 0, "Recalculation of tag #{ASS.toFriendlyName[tag]} would result in a negative value."
                                 AssfPlus._util.windowAssertError yOrigValue * y >= 0, "Recalculation of tag #{ASS.toFriendlyName[tag]} would result in a negative value."
                                 tg\mul x, y
     @end
**** Alphas
     Clamp alpha to 0 - 255.
     @code moon
                     when "alpha", "alpha1", "alpha2", "alpha3", "alpha4"
                         assertType x, "number", tag
                         data\modTags tag, (tg) ->
                             origValue = tg.value
                             local newValue
                             if operation == "add"
                                 newValue = util.clamp(origValue + x, 0, 255)
                             elseif operation == "mul"
                                 newValue = util.clamp(origValue * x, 0, 255)
                             tg\set newValue
     @end
**** 1c, 2c, 3c, 4c
     @code moon
                     when "color1", "color2", "color3", "color4"
                         assertType x, "table", tag
                         AssfPlus._util.windowAssertError #x == 3, "Invalid color input: #{res["changeValueX"]}\nExpected input in r,g,b format."
                         r, g, b  = table.unpack x
                         data\modTags tag, (tg) ->
                             bOG, gOG, rOG = tg\getTagParams!
                             if operation == "add"
                                 r, g, b = util.clamp(r + rOG, 0, 255), util.clamp(g + gOG, 0, 255), util.clamp(b + bOG, 0, 255)
                             elseif operation == "mul"
                                 r, g, b = r/100, g/100, b/100
                                 r, g, b = util.clamp(r * rOG, 0, 255), util.clamp(g * gOG, 0, 255), util.clamp(b * bOG, 0, 255)
                             tg\set r, g, b
     @end
**** Positive Tags
     This tags cannot be negative hence a special case for them here.
     @code moon
                     when "outline", "outline_x", "outline_y", "blur_edges", "blur", "fontsize", "shadow", "shadow_x", "shadow_y"
                         assertType x, "number", tag
                         data\modTags tag, (tg) ->
                             origValue = tg.value
                             if operation == "add"
                                 AssfPlus._util.windowAssertError origValue + x >= 0, "Recalculation of tag #{ASS.toFriendlyName[tag]} would result in a negative value."
                                 tg\add x
                             elseif operation == "mul"
                                 AssfPlus._util.windowAssertError origValue * x >= 0, "Recalculation of tag #{ASS.toFriendlyName[tag]} would result in a negative value."
                                 tg\mul x
     @end
**** Rest of the Tags
     This will operate on the rest of the tags:
     fscx, fscy, fsp, shad, xshad, yshad, frz, frx, fry, fax, fay, alpha, 1a, 2a, 3a, 4a, k, ko, kf
     @code moon
                     else
                         assertType x, "number", tag
                         data\modTags tag, (tg) -> tg[operation] tg, x
     @end

*** Random
    If user uses random function, then we need to find random value for each iteration of line.
    @code moon
            if res["changeValueX"]\match "random" or res["changeValueY"]\match "random"
                x = execute_command res["changeValueX"], operation
                y = execute_command res["changeValueY"], operation
    @end
*** Line Increment
    If user chooses to change the value by a certain value for each iteration, we increase the value here.
    @code moon
            if res["lineIncrement"]
                if type(originalX) == "number"
                    x += originalX
                elseif type(originalX) == "table"
                    x = [item + x[index] for index, item in ipairs originalX]
                elseif f = res["changeValueX"]\match "^([%d%-%.]+)f$"
                    x = x\gsub "^([%d%-%.]+)f$", (arg) -> tostring(math.floor(arg+f)).."f"
    
                if type(originalY) == "number"
                    y += originalY
                elseif type(originalY) == "table"
                    y = [item + y[index] for index, item in ipairs originalY]
                elseif f = res["changeValueY"]\match "^([%d%-%.]+)f$"
                    y = y\gsub "^([%d%-%.]+)f$", (arg) -> tostring(math.floor(arg+f)).."f"
    @end
*** Commit all the changes
    @code moon
            data\commit!
    @end
** Close the line collection callback
   The following makes line collection loop though line in order
   @code moon
       ), true
   @end
** Replace all the lines
   @code moon
       lines\replaceLines!
   @end
* Register the macro to Aegisub
  @code moon
  depctrl\registerMacro main
  @end
